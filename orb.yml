version: 2.1

description: Delta Rubocop Reports
orbs:
  dscar: naokikimura/dscar@0.0.11
executors:
  default:
    description: Use a CircleCI convenience image to analyze code statically
    docker:
      - image: circleci/ruby:latest
commands:
  execute:
    description: Calculate the difference of Rubocop results between HEAD branch and BASE branch
    parameters:
      analysis-prepare:
        description: Specify the required steps before Rubocop if necessary
        type: steps
        default: []
      analysis-command-version:
        description: The command version used for analysis
        type: string
        default: ""
      analysis-arguments:
        description: Arguments of rubocop command
        type: string
        default: ""
      test-results-path:
        description: Specify the value of the path parameter in the store_test_results step if you need to change it
        type: string
        default: "/tmp/test-results"
      analysis-result-format:
        description: Specify "RuboCop::Formatter::JUnitFormatter" if you want to use a non-standard formatter
        type: enum
        enum: ["junit", "RuboCop::Formatter::JUnitFormatter"]
        default: "junit"
    steps:
      - run: sudo gem install rubocop rubocop-performance rubocop-rails
      - when:
          condition: << parameters.analysis-command-version >>
          steps:
            - run: "sudo gem install rubocop:0.80 rubocop:<< parameters.analysis-command-version >>"
            - dscar/execute:
                analysis-name: Rubocop
                analysis-command: rubocop _<< parameters.analysis-command-version >>_
                analysis-prepare: << parameters.analysis-prepare >>
                analysis-arguments: << parameters.analysis-arguments >> -f << parameters.analysis-result-format >> -C false
                calculate-options: --test-case-key='concat(@classname,"#",@name,"=>",normalize-space())'
                test-results-path: << parameters.test-results-path >>
                analysis-exit-code-threshold: 2
      - unless:
          condition: << parameters.analysis-command-version >>
          steps:
            - dscar/execute:
                analysis-name: Rubocop
                analysis-command: rubocop
                analysis-prepare: << parameters.analysis-prepare >>
                analysis-arguments: << parameters.analysis-arguments >> -f << parameters.analysis-result-format >> -C false
                calculate-options: --test-case-key='concat(@classname,"#",@name,"=>",normalize-space())'
                test-results-path: << parameters.test-results-path >>
                analysis-exit-code-threshold: 2

jobs:
  execute:
    description: Calculate the difference of Rubocop results between HEAD branch and BASE branch
    parameters:
      executor:
        type: executor
        default: default
      analysis-prepare:
        description: Specify the required steps before rubocop if necessary
        type: steps
        default: []
      analysis-command-version:
        description: The command version used for analysis
        type: string
        default: ""
      analysis-arguments:
        description: Arguments of rubocop command
        type: string
        default: ""
      test-results-path:
        description: Specify the value of the path parameter in the store_test_results step if you need to change it
        type: string
        default: "/tmp/test-results"
      analysis-result-format:
        description: Specify "RuboCop::Formatter::JUnitFormatter" if you want to use a non-standard formatter
        type: enum
        enum: ["junit", "RuboCop::Formatter::JUnitFormatter"]
        default: "junit"
    executor: << parameters.executor >>
    steps:
      - execute:
          analysis-prepare: << parameters.analysis-prepare >>
          analysis-command-version: << parameters.analysis-command-version >>
          analysis-arguments: << parameters.analysis-arguments >>
          test-results-path: << parameters.test-results-path >>
          analysis-result-format: << parameters.analysis-result-format >>

examples:

  v0_80-or-newer:
    description: Example that can be executed in v0.80 or newer
    usage:
      version: 2.1
      orbs:
        dscar: naokikimura/dscar-rubocop@0.0.1
      workflows:
        analyze-code-statically:
          jobs:
            - dscar-rubocop/execute:
                name: rubocop

  older-than-v0_80:
    description: Example that cannot be executed unless it is older than v0.80
    usage:
      version: 2.1
      orbs:
        dscar: naokikimura/dscar-rubocop@0.0.1
      executors:
        ruby-2_7:
          docker:
            - image: circleci/ruby:2.7.0
      workflows:
        analyze-code-statically:
          jobs:
            - dscar-rubocop/execute:
                name: rubocop
                executor: ruby-2_7
                analysis-prepare:
                    - run:
                        command: |
                          sudo gem uninstall -a rubocop-performance
                          sudo gem install rubocop-performance:1.3.0
                analysis-command-version: 0.68.1
                analysis-arguments: "-r /usr/local/lib/ruby/gems/2.7.0/gems/rubocop-0.80.0/lib/rubocop/formatter/junit_formatter.rb"
                analysis-result-format: "RuboCop::Formatter::JUnitFormatter"
