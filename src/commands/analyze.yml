description: Analyze code statically using Rubocop
parameters:
  starting-points:
    description: Specify the path of starting to search for files to analyze (Multiple paths can be specified by separating them with line feed)
    type: string
    default: "."
  patterns-to-include:
    description: Specify patterns to include by regular expression (Multiple patterns can be specified by separating them with line feed)
    type: string
    default: ".*"
  patterns-to-exclude:
    description: Specify patterns to exclude by regular expression (Multiple patterns can be specified by separating them with line feed)
    type: string
    default: |
        ^\./\.git/.*
  analysis-command-version:
    description: The command version used for analysis
    type: string
    default: ""
  analysis-arguments:
    description: Arguments of rubocop command
    type: string
    default: ""
  prepare:
    description: Specify the required steps before analysis if necessary
    type: steps
    default:
      - install-analyzer
  analysis-results-path:
    description: "Specify the path to save the analysis results if you need to change it (default: /tmp/dscar/analysis-results)"
    type: string
    default: ""
  error-pattern:
    description: Specify the pattern if you want to detect analyzing errors from the standard error
    type: string
    default: '.*'
  no-output-timeout:
    description: Elapsed time the command can run without output. The string is a decimal with unit suffix, such as “20m”, “1.25h”, “5s”
    type: string
    default: 10m
  redirecting-output:
    description: Specify "/dev/null" if you do not want to display the analysis results on the standard output
    type: enum
    enum: ["/dev/stdout", "/dev/stderr", "/dev/null"]
    default: "/dev/null"
  max-procs:
    description: Specify the maximum number of processes to run at the same time
    type: integer
    default: 1
  should-use-bundler:
    description: Specify true if you want to perform analysis using Bundler
    type: boolean
    default: false
steps:
  - when:
      condition: << parameters.should-use-bundler >>
      steps:
        - dscar/analyze: &analyze
            step-name: Analyze code statically using Rubocop
            analysis-name: Rubocop
            analysis-command: bundle
            analysis-arguments: |
              exec
              rubocop
              << parameters.analysis-arguments >>
              -f json
              -C false
              --force-exclusion
            error-pattern: << parameters.error-pattern >>
            transformation-command: jq
            prepare:
              - steps: << parameters.prepare >>
              - when:
                  condition: << parameters.should-use-bundler >>
                  steps:
                    - run: bundle install
              - run: sudo apt-get install jq
              - run:
                  name: export TRANSFORMATION_ARGUMENTS
                  command: |
                    set -x
                    FILTER="$(
                    cat \<<-EOT | tr -s ' \n' ' '
                    map(.files) | flatten | map(
                      (@html "<file name=\"\(.path)\">") +
                      "\(.offenses | map(
                        @html "<error source=\"\(.cop_name)\" line=\"\(.location.line)\" column=\"\(.location.column)\" severity=\"\(.severity)\" message=\"\(.message)\" />"
                      ) | join(""))</file>"
                    ) | "<checkstyle>\(join(""))</checkstyle>"
                    EOT
                    )"
                    declare -ax TRANSFORMATION_ARGUMENTS=( -srM "$FILTER" )
                    echo "$(declare -p TRANSFORMATION_ARGUMENTS)" >> $BASH_ENV
            should-find: "true"
            starting-points: << parameters.starting-points >>
            patterns-to-include: << parameters.patterns-to-include >>
            patterns-to-exclude: << parameters.patterns-to-exclude >>
            analysis-results-path: << parameters.analysis-results-path >>
            no-output-timeout: << parameters.no-output-timeout >>
            redirecting-output: << parameters.redirecting-output >>
            max-procs: << parameters.max-procs >>
  - unless:
      condition: << parameters.should-use-bundler >>
      steps:
        - when:
            condition: << parameters.analysis-command-version >>
            steps:
              - dscar/analyze:
                  <<: *analyze
                  analysis-command: rubocop
                  analysis-arguments: |
                    _<< parameters.analysis-command-version >>_
                    << parameters.analysis-arguments >>
                    -f json
                    -C false
                    --force-exclusion
        - unless:
            condition: << parameters.analysis-command-version >>
            steps:
              - dscar/analyze:
                  <<: *analyze
                  analysis-command: rubocop
                  analysis-arguments: |
                    << parameters.analysis-arguments >>
                    -f json
                    -C false
                    --force-exclusion
